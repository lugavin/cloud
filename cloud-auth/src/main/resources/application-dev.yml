# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

# com.netflix.client.config.CommonClientConfigKey
# com.netflix.client.config.DefaultClientConfigImpl
# org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties
# Ribbon默认(spring.cloud.loadbalancer.retry=true)开启重试, Ribbon重试默认(ribbon.OkToRetryOnAllOperations=false)对GET请求有效, 不建议修改, 否则要对所有POST方法实现幂等
# Retries=MaxAutoRetries+MaxAutoRetriesNextServer+(MaxAutoRetries*MaxAutoRetriesNextServer)
# RibbonTimeout=(ReadTimeout+ConnectTimeout)*(MaxAutoRetries+1)*(MaxAutoRetriesNextServer+1)
ribbon:
  #eureka:
  #  enabled: true             # 是否在Ribbon中使用Eureka
  ReadTimeout: 6000           # 请求处理超时时间
  ConnectTimeout: 6000        # 请求连接超时时间
  MaxAutoRetries: 1           # 对当前服务实例的重试次数(不包括首次调用)
  MaxAutoRetriesNextServer: 1 # 对下一个服务实例的重试次数(不包括首次调用)

# com.netflix.hystrix.HystrixCommandProperties
# Feign和Ribbon在整合了Hystrix后可能会出现首次调用失败的问题, 造成该问题的原因是Hystrix默认的超时时间是1秒,
# 如果超过这个时间尚未响应, 将会进入fallback代码, 而首次请求往往会比较慢(因为Spring的懒加载机制, 要实例化一些类), 这个响应时间可能就超过1秒.
# 解决办法:
# (1)禁用Hystrix的超时时间(hystrix.command.default.execution.timeout.enabled=false)
# (2)延长Hystrix的超时时间(hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000)
# (3)禁用Feign的Hystrix(不推荐使用)
hystrix:
  command:
    default:
      execution:
        #timeout:
        #  enabled: false # 禁用Hystrix的超时时间
        isolation:
          thread:
            timeoutInMilliseconds: 60000 # 如果在重试期间RibbonTimeout超过HystrixTimeout, 便会立即执行熔断(Fallback), 重试也就没意义

