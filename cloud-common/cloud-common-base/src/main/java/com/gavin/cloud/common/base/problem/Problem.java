package com.gavin.cloud.common.base.problem;

import java.net.URI;
import java.util.Collections;
import java.util.Map;

/**
 * New problem type definitions MUST document:
 * 1. a type URI (typically, with the "http" or "https" scheme)
 * 2. a title that appropriately describes it (think short)
 * 3. the HTTP status code for it to be used with
 * <p>
 * For example:
 * <pre><code>
 * {
 *   "type": "https://example.com/probs/out-of-credit",
 *   "title": "You do not have enough credit.",
 *   "detail": "Your current balance is 30, but that costs 50.",
 *   "instance": "/account/12345/msgs/abc",
 *   "balance": 30,
 *   "accounts": ["/account/12345", "/account/67890"]
 * }
 * </code></pre>
 *
 * @see <a href="https://tools.ietf.org/html/rfc7807">RFC 7807: Problem Details for HTTP APIs</a>
 */
public interface Problem {

    URI DEFAULT_TYPE = URI.create("about:blank");

    /**
     * An absolute URI that identifies the problem type. When dereferenced,
     * it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML). When this member is not present, its value is
     * assumed to be "about:blank".
     *
     * @return an absolute URI that identifies this problem's type
     */
    default URI getType() {
        return DEFAULT_TYPE;
    }

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT
     * change from occurrence to occurrence of the problem, except for
     * purposes of localisation.
     *
     * @return a short, human-readable summary of this problem
     */
    String getTitle();

    /**
     * The HTTP status code generated by the origin server for this
     * occurrence of the problem.
     *
     * @return the HTTP status code
     */
    StatusType getStatus();

    /**
     * A human readable explanation specific to this occurrence of the problem.
     *
     * @return A human readable explaination of this problem
     */
    default String getDetail() {
        return null;
    }

    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     *
     * @return an absolute URI that identifies this specific problem
     */
    default URI getInstance() {
        return null;
    }

    /**
     * Optional, additional attributes of the problem. Implementations can choose to ignore this in favor of concrete,
     * typed fields.
     *
     * @return additional parameters
     */
    default Map<String, Object> getParameters() {
        return Collections.emptyMap();
    }

    static ProblemBuilder builder() {
        return new ProblemBuilder();
    }

}
